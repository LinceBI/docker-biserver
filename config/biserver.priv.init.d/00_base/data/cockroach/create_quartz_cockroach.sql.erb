-- DROP DATABASE IF EXISTS "<%= ENV['COCKROACH_QUARTZ_DATABASE'] %>";
-- DROP USER IF EXISTS "<%= ENV['COCKROACH_QUARTZ_USER'] %>";

CREATE USER "<%= ENV['COCKROACH_QUARTZ_USER'] %>" WITH PASSWORD '<%= ENV['COCKROACH_QUARTZ_PASSWORD'] %>';
CREATE DATABASE "<%= ENV['COCKROACH_QUARTZ_DATABASE'] %>" WITH ENCODING = 'UTF8';
GRANT ALL ON DATABASE "<%= ENV['COCKROACH_QUARTZ_DATABASE'] %>" TO "<%= ENV['COCKROACH_QUARTZ_USER'] %>";

\connect "<%= ENV['COCKROACH_QUARTZ_DATABASE'] %>"

BEGIN;

CREATE TABLE QRTZ5_JOB_DETAILS (
	JOB_NAME VARCHAR(200) NOT NULL,
	JOB_GROUP VARCHAR(200) NOT NULL,
	DESCRIPTION VARCHAR(250) NULL,
	JOB_CLASS_NAME VARCHAR(250) NOT NULL,
	IS_DURABLE BOOL NOT NULL,
	IS_VOLATILE BOOL NOT NULL,
	IS_STATEFUL BOOL NOT NULL,
	REQUESTS_RECOVERY BOOL NOT NULL,
	JOB_DATA BYTEA NULL,
	PRIMARY KEY (JOB_NAME, JOB_GROUP)
);

CREATE TABLE QRTZ5_JOB_LISTENERS (
	JOB_NAME VARCHAR(200) NOT NULL,
	JOB_GROUP VARCHAR(200) NOT NULL,
	JOB_LISTENER VARCHAR(200) NOT NULL,
	PRIMARY KEY (JOB_NAME, JOB_GROUP, JOB_LISTENER),
	FOREIGN KEY (JOB_NAME, JOB_GROUP)
	REFERENCES QRTZ5_JOB_DETAILS(JOB_NAME, JOB_GROUP)
);

CREATE TABLE QRTZ5_TRIGGERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	JOB_NAME VARCHAR(200) NOT NULL,
	JOB_GROUP VARCHAR(200) NOT NULL,
	IS_VOLATILE BOOL NOT NULL,
	DESCRIPTION VARCHAR(250) NULL,
	NEXT_FIRE_TIME BIGINT NULL,
	PREV_FIRE_TIME BIGINT NULL,
	PRIORITY INTEGER NULL,
	TRIGGER_STATE VARCHAR(16) NOT NULL,
	TRIGGER_TYPE VARCHAR(8) NOT NULL,
	START_TIME BIGINT NOT NULL,
	END_TIME BIGINT NULL,
	CALENDAR_NAME VARCHAR(200) NULL,
	MISFIRE_INSTR SMALLINT NULL,
	JOB_DATA BYTEA NULL,
	PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP),
	FOREIGN KEY (JOB_NAME, JOB_GROUP)
	REFERENCES QRTZ5_JOB_DETAILS(JOB_NAME, JOB_GROUP)
);

CREATE TABLE QRTZ5_SIMPLE_TRIGGERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	REPEAT_COUNT BIGINT NOT NULL,
	REPEAT_INTERVAL BIGINT NOT NULL,
	TIMES_TRIGGERED BIGINT NOT NULL,
	PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP),
	FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP)
	REFERENCES QRTZ5_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ5_CRON_TRIGGERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	CRON_EXPRESSION VARCHAR(120) NOT NULL,
	TIME_ZONE_ID VARCHAR(80),
	PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP),
	FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP)
	REFERENCES QRTZ5_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ5_BLOB_TRIGGERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	BLOB_DATA BYTEA NULL,
	PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP),
	FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP)
	REFERENCES QRTZ5_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ5_TRIGGER_LISTENERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	TRIGGER_LISTENER VARCHAR(200) NOT NULL,
	PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_LISTENER),
	FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP)
	REFERENCES QRTZ5_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ5_CALENDARS (
	CALENDAR_NAME VARCHAR(200) NOT NULL,
	CALENDAR BYTEA NOT NULL,
	PRIMARY KEY (CALENDAR_NAME)
);

CREATE TABLE QRTZ5_PAUSED_TRIGGER_GRPS (
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	PRIMARY KEY (TRIGGER_GROUP)
);

CREATE TABLE QRTZ5_FIRED_TRIGGERS (
	ENTRY_ID VARCHAR(95) NOT NULL,
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	IS_VOLATILE BOOL NOT NULL,
	INSTANCE_NAME VARCHAR(200) NOT NULL,
	FIRED_TIME BIGINT NOT NULL,
	PRIORITY INTEGER NOT NULL,
	STATE VARCHAR(16) NOT NULL,
	JOB_NAME VARCHAR(200) NULL,
	JOB_GROUP VARCHAR(200) NULL,
	IS_STATEFUL BOOL NULL,
	REQUESTS_RECOVERY BOOL NULL,
	PRIMARY KEY (ENTRY_ID)
);

CREATE TABLE QRTZ5_SCHEDULER_STATE (
	INSTANCE_NAME VARCHAR(200) NOT NULL,
	LAST_CHECKIN_TIME BIGINT NOT NULL,
	CHECKIN_INTERVAL BIGINT NOT NULL,
	PRIMARY KEY (INSTANCE_NAME)
);

CREATE TABLE QRTZ5_LOCKS (
	LOCK_NAME VARCHAR(40) NOT NULL,
	PRIMARY KEY (LOCK_NAME)
);

INSERT INTO QRTZ5_LOCKS VALUES('TRIGGER_ACCESS');
INSERT INTO QRTZ5_LOCKS VALUES('JOB_ACCESS');
INSERT INTO QRTZ5_LOCKS VALUES('CALENDAR_ACCESS');
INSERT INTO QRTZ5_LOCKS VALUES('STATE_ACCESS');
INSERT INTO QRTZ5_LOCKS VALUES('MISFIRE_ACCESS');

COMMIT;
