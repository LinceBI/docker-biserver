<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:pen="http://www.pentaho.com/schema/pentaho-system"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.pentaho.com/schema/pentaho-system http://www.pentaho.com/schema/pentaho-system.xsd"
	default-lazy-init="true">

	<bean id="ldapAuthenticationProvider" class="org.pentaho.platform.plugin.services.security.userrole.ldap.DefaultLdapAuthenticationProvider">
		<constructor-arg>
			<ref bean="authenticator" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="populator" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="ldapRoleMapper" />
		</constructor-arg>
		<property name="userDetailsContextMapper">
			<ref bean="ldapContextMapper" />
		</property>
	</bean>

	<bean id="ldapContextMapper" class="org.pentaho.platform.engine.security.UseridAttributeLdapContextMapper">
		<property name="ldapUsernameAttribute" value="${ldap.all_usernames_search.username_attribute}" />
	</bean>

	<!-- Interceptor which changes the thread context classloader to the class current classloader -->
	<bean id="classloaderSwitcherInterceptor" class="org.pentaho.platform.plugin.services.security.userrole.ClassloaderSwitcherInterceptor"></bean>

	<!--
	This proxy bean is used to change the thread context classloader in order to escape ClassCastException in:
	org.springframework.ldap.odm.typeconversion.impl.ConversionServiceConverterManager
	-->
	<bean id="ldapAuthenticationProviderProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="org.springframework.security.authentication.AuthenticationProvider" />
		<property name="target" ref="ldapAuthenticationProvider" />
		<property name="interceptorNames">
			<list>
				<value>classloaderSwitcherInterceptor</value>
			</list>
		</property>
		<pen:publish as-type="org.springframework.security.authentication.AuthenticationProvider">
			<pen:attributes>
				<pen:attr key="providerName" value="ldap" />
			</pen:attributes>
		</pen:publish>
	</bean>

	<bean id="authenticator" class="org.springframework.security.ldap.authentication.BindAuthenticator">
		<constructor-arg>
			<ref bean="contextSource" />
		</constructor-arg>
		<property name="userSearch">
			<ref bean="userSearch" />
		</property>
	</bean>

	<bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<constructor-arg value="${ldap.context_source.provider_url}" />
		<property name="userDn" value="${ldap.context_source.user_dn}" />
		<property name="password" value="${ldap.context_source.password}" />
	</bean>

	<!-- Be sure to escape ampersands -->
	<bean id="userSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
		<constructor-arg index="0" value="${ldap.user_search.search_base}" />
		<constructor-arg index="1" value="${ldap.user_search.search_filter}" />
		<constructor-arg index="2">
			<ref bean="contextSource" />
		</constructor-arg>
	</bean>

	<%- if ENV['SECURITY_ROLE_PROVIDER'] == 'ldap' -%>
	<!-- Be sure to escape ampersands -->
	<bean id="populator" class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
		<constructor-arg index="0">
			<ref bean="contextSource" />
		</constructor-arg>
		<constructor-arg index="1" value="${ldap.populator.group_search_base}" />
		<!-- {0} will be replaced with user DN; {1} will be replaced with username -->
		<property name="groupSearchFilter" value="${ldap.populator.group_search_filter}" />
		<property name="groupRoleAttribute" value="${ldap.populator.group_role_attribute}" />
		<property name="searchSubtree" value="${ldap.populator.search_subtree}" />
		<property name="rolePrefix" value="${ldap.populator.role_prefix}" />
		<property name="convertToUpperCase" value="${ldap.populator.convert_to_upper_case}" />
		<property name="defaultRole" ref="defaultRole" />
	</bean>
	<%- elsif ENV['SECURITY_ROLE_PROVIDER'] == 'jdbc' -%>
	<bean id="populator" class="org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator">
		<constructor-arg ref="jdbcUserDetailsService" />
	</bean>
	<%- else -%>
	<bean id="populator" class="org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator">
		<constructor-arg ref="userDetailsService" />
	</bean>
	<%- end -%>

	<bean id="ldapUserDetailsService0" class="org.pentaho.platform.plugin.services.security.userrole.ldap.DefaultLdapUserDetailsService">
		<constructor-arg>
			<ref bean="userSearch" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="populator" />
		</constructor-arg>
		<constructor-arg ref="tenantedUserNameUtils" />
	</bean>

	<!--
	This proxy bean is used to change the thread context classloader in order to escape ClassCastException in
	org.springframework.ldap.odm.typeconversion.impl.ConversionServiceConverterManager
	-->
	<bean id="ldapUserDetailsServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="org.springframework.security.core.userdetails.UserDetailsService" />
		<property name="target" ref="ldapUserDetailsService0" />
		<property name="interceptorNames">
			<list>
				<value>classloaderSwitcherInterceptor</value>
			</list>
		</property>
	</bean>

	<!-- Map LDAP role to pentaho security role -->
	<util:map id="ldapRoleMap">
		<entry key="${ldap.admin_role}" value="Administrator" />
	</util:map>

	<bean id="ldapRoleMapper" class="org.pentaho.platform.engine.security.DefaultLdapRoleMapper">
		<constructor-arg>
			<ref bean="ldapRoleMap" />
		</constructor-arg>
		<constructor-arg value="${ldap.all_authorities_search.role_attribute}" />
	</bean>

	<!--
	LDAP is different from JDBC and others in that its authenticationProvider does not delegate to a
	userDetailsService. While the others use org.springframework.security.providers.dao.DaoAuthenticationProvider which
	does the password check, LDAP binds as the user to check the password. Because userDetailsService isn't used by
	authenticationProvider, defaultRole property of populator bean must be supplied to automatically inject a default
	role. This bean is actually not used in this file but instead in applicationContext-pentaho-security-ldap.xml.
	In that file, userRoleListService uses this bean for fetching roles for a user (e.g. during scheduled jobs).
	-->
	<bean id="ldapUserDetailsService" class="org.pentaho.platform.engine.security.DefaultRoleUserDetailsServiceDecorator">
		<property name="userDetailsService" ref="ldapUserDetailsServiceProxy" />
		<property name="defaultRole" ref="defaultRole" />
		<property name="roleMapper" ref="ldapRoleMapper" />
		<pen:publish as-type="INTERFACES">
			<pen:attributes>
				<pen:attr key="providerName" value="ldap" />
			</pen:attributes>
		</pen:publish>
	</bean>

	<bean class="org.pentaho.platform.config.SolutionPropertiesFileConfiguration">
		<constructor-arg value="ldap" />
		<constructor-arg value="applicationContext-security-ldap.properties" />
		<pen:publish as-type="INTERFACES" />
	</bean>

</beans>
