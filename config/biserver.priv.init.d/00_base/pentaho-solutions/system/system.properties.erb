# Set to true to enable caching of Entry elements in the Repository.
cachingEntryCollector=true

# Time in milliseconds that a call to a missing <pen:bean> will block before failing. Bean Dampening can be turned off
# by setting this value to -1
dampening-timeout=10000

# By default default content will load Asynchronously on server start. To block server availability until all
# default content is loaded, set this value to "false"
enable-async-default-content-loading=true

# Set to false to disable caching of domain information
# enableDomainIdCache = false

# Whether or not to hide the user home folder on user creation
hideUserHomeFolderOnCreate=false

# Default folder to open or save file(s) in case user's home folder is hidden
defaultFolderWhenHomeFolderIsHidden=/public

# Default number of threads for caching domains
number-threads=3

## CSRF ##

# Enables CSRF (Cross-Site Request Forgery) protection for the server.
#
# Default value: false (unsafe, yet backward-compatible).
#
# *ATTENTION*:
# Setting this option to false opens the server and all of its plugins to known security flaws,
# which can allow an attacker to perform CSRF attacks.
#
# Do NOT set this option to false, if at all possible. Instead, consider disabling CSRF protection selectively,
# for certain platform plugins or for certain endpoints.
# This may be necessary if there still exists external code which depends on the unprotected and deprecated APIs.
#
# To disable CSRF protection for a plugin, in its `plugin.spring.xml` file, look for a bean registering
# the interface `CsrfRequestSetConfiguration`, such as of the stock class `CsrfRequestSetConfigurationPojo`
# and any accompanying documentation.
#
# To disable CSRF protection for certain server endpoints, go to the `applicationContext-spring-security-csrf.xml` file
# and, in the bean of class `CsrfRequestSetConfigurationPojo`, comment the corresponding `*-request-matcher` element.
csrf-protection-enabled=<%= ENV['CSRF_PROTECTION_ENABLED'] %>

## CORS ##

# Enable cross origin requests.
cors-requests-allowed=<%= ENV['CORS_REQUESTS_ALLOWED'] %>

# Comma-separated list of external origins which can call this server.
# Example: http://domainA.com, http://localhost:1337
cors-requests-allowed-domains=<%= ENV['CORS_REQUESTS_ALLOWED_DOMAINS'] %>

# When CORS is enabled, and when set to `false` (the default), indicates that CORS is enabled
# for all requests, even those not explicitly covered by a child configuration.
#
# When set to `true`, the root CORS configuration is "abstract",
# meaning that only endpoints which are covered by an explicit and enabled child CORS
# configuration actually allow CORS. This gives more control on which endpoints actually
# support CORS at the expense of additional configuration for any endpoints not covered by
# the default configurations.
cors-root-config-is-abstract=<%= ENV['CORS_ROOT_CONFIG_IS_ABSTRACT'] %>

# Allowed HTTP methods for all cross-origin requests:
cors-requests-allowed-methods=<%= ENV['CORS_REQUESTS_ALLOWED_METHODS'] %>

# Allowed request HTTP headers for all cross-origin requests:
# (note: CONTENT-TYPE and X-CSRF-TOKEN are required for proper CSRF operation)
cors-requests-allowed-headers=<%= ENV['CORS_REQUESTS_ALLOWED_HEADERS'] %>

# Allow credentials for all cross-origin requests?
cors-requests-allow-credentials=<%= ENV['CORS_REQUESTS_ALLOW_CREDENTIALS'] %>

# Exposed response HTTP headers for all cross-origin requests:
cors-requests-exposed-headers=<%= ENV['CORS_REQUESTS_EXPOSED_HEADERS'] %>
