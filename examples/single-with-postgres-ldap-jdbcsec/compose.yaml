# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
name: "biserver"

# https://hub.docker.com/_/caddy
x-caddy-image: &caddy-image "docker.io/caddy:2"
# https://repo.stratebi.com
x-biserver-image: &biserver-image "repo.stratebi.com/lincebi/biserver:9.5.2.0-272-2"
# https://hub.docker.com/r/bitnami/openldap
x-openldap-image: &openldap-image "docker.io/bitnami/openldap:2.6.7"
# https://hub.docker.com/_/postgres
x-postgres-image: &postgres-image "docker.io/postgres:16-bookworm"

services:

  caddy:
    image: *caddy-image
    restart: "on-failure:3"
    container_name: "biserver-caddy"
    hostname: "caddy"
    networks:
      - "biserver"
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
    volumes:
      - { type: "bind", source: "./config/caddy/", target: "/etc/caddy/", read_only: true }
      - { type: "volume", source: "caddy-data", target: "/data/" }
      - { type: "volume", source: "biserver-logs", target: "/var/www/html/logs/", read_only: true }
    environment:
      DOMAIN: "${DOMAIN:?}"
      TLS_ISSUER: "${TLS_ISSUER:?}"
      TLS_ISSUER_CA: "${TLS_ISSUER_CA:?}"
      TLS_ISSUER_EMAIL: "${TLS_ISSUER_EMAIL:?}"
      TLS_KEY: "${TLS_KEY:-}"
      TLS_CERT: "${TLS_CERT:-}"
      BASIC_AUTH_PASSWORD: "${DEFAULT_ADMIN_PASSWORD:?}"
    entrypoint: "/bin/sh"
    command:
      - "-euc"
      - |
        export BASIC_AUTH_PASSWORD_HASH=$(printenv BASIC_AUTH_PASSWORD | caddy hash-password)
        exec caddy run --config /etc/caddy/Caddyfile --adapter caddyfile

  biserver:
    image: *biserver-image
    restart: "on-failure:3"
    container_name: "biserver"
    hostname: "biserver"
    networks:
      - "biserver"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - { type: "bind", source: "./config/biserver/biserver.init.d/", target: "/etc/biserver.init.d/", read_only: true }
      - { type: "volume", source: "biserver-logs", target: "/var/lib/biserver/tomcat/logs/" }
    environment:
      IS_PROXIED: "true"
      PROXY_SCHEME: "https"
      PROXY_PORT: "443"
      FQSU_PROTOCOL: "https"
      FQSU_DOMAIN: "${DOMAIN:?}"
      FQSU_PORT: "443"
      LOAD_SAMPLES: "${LOAD_SAMPLES:-true}"
      WEBAPP_PENTAHO_DIRNAME: "${WEBAPP_PENTAHO_DIRNAME:-pentaho}"
      DEFAULT_ADMIN_PASSWORD: "${DEFAULT_ADMIN_PASSWORD:?}"
      SECURITY_PROVIDER: "ldap"
      LDAP_CONTEXT_SOURCE_PROVIDER_URL: "ldap://openldap:1389"
      LDAP_CONTEXT_SOURCE_USER_DN: "cn=admin,dc=example,dc=localhost"
      LDAP_CONTEXT_SOURCE_PASSWORD: "${LDAP_ADMIN_PASSWORD:?}"
      LDAP_ALL_USERNAMES_SEARCH_SEARCH_BASE: "ou=users,dc=example,dc=localhost"
      LDAP_ALL_USERNAMES_SEARCH_SEARCH_FILTER: "(objectClass=inetOrgPerson)"
      LDAP_USER_SEARCH_SEARCH_FILTER: "(cn={0})"
      SECURITY_ROLE_PROVIDER: "jdbc"
      JDBCSEC_ADMIN_ROLE: "Administrator"
      JDBCSEC_DATASOURCE_DRIVER_CLASSNAME: "org.postgresql.Driver"
      JDBCSEC_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/${DB_JDBCSEC_DATABASE:-jdbcsec}"
      JDBCSEC_DATASOURCE_USER: "${DB_JDBCSEC_USER:-jdbcsec}"
      JDBCSEC_DATASOURCE_PASSWORD: "${DB_JDBCSEC_PASSWORD:?}"
      JDBCSEC_AUTHORITIES_BY_USERNAME_QUERY: >-
        SELECT username, authority
        FROM granted_authorities
        WHERE username = ?
        ORDER BY authority
      JDBCSEC_USERS_BY_USERNAME_QUERY: >-
        SELECT username, password, enabled
        FROM users
        WHERE username = ?
        ORDER BY username
      JDBCSEC_ALL_AUTHORITIES_QUERY: >-
        SELECT authority
        FROM authorities
        ORDER BY authority
      JDBCSEC_ALL_USERNAMES_QUERY: >-
        SELECT username
        FROM users
        ORDER BY username
      JDBCSEC_ALL_USERNAMES_IN_ROLE_QUERY: >-
        SELECT username
        FROM granted_authorities
        WHERE authority = ?
        ORDER BY username
      STORAGE_TYPE: "postgres"
      POSTGRES_HOST: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "${DB_PASSWORD:?}"
      POSTGRES_JACKRABBIT_USER: "${DB_JACKRABBIT_USER:-jackrabbit}"
      POSTGRES_JACKRABBIT_PASSWORD: "${DB_JACKRABBIT_PASSWORD:?}"
      POSTGRES_JACKRABBIT_DATABASE: "${DB_JACKRABBIT_DATABASE:-jackrabbit}"
      POSTGRES_HIBERNATE_USER: "${DB_HIBERNATE_USER:-hibernate}"
      POSTGRES_HIBERNATE_PASSWORD: "${DB_HIBERNATE_PASSWORD:?}"
      POSTGRES_HIBERNATE_DATABASE: "${DB_HIBERNATE_DATABASE:-hibernate}"
      POSTGRES_QUARTZ_USER: "${DB_QUARTZ_USER:-quartz}"
      POSTGRES_QUARTZ_PASSWORD: "${DB_QUARTZ_PASSWORD:?}"
      POSTGRES_QUARTZ_DATABASE: "${DB_QUARTZ_DATABASE:-quartz}"
    depends_on:
      openldap:
        condition: "service_started"
      postgres:
        condition: "service_healthy"

  openldap:
    image: *openldap-image
    restart: "on-failure:3"
    container_name: "biserver-openldap"
    hostname: "openldap"
    networks:
      - "biserver"
    ports:
      - "${OPENLDAP_HOST:-127.0.0.1}:${OPENLDAP_PORT:-1389}:1389/tcp"
    volumes:
      - { type: "bind", source: "./config/openldap/ldifs/", target: "/ldifs/", read_only: true }
      - { type: "volume", source: "openldap-data", target: "/bitnami/openldap/" }
    environment:
      LDAP_ROOT: "dc=example,dc=localhost"
      LDAP_ADMIN_USERNAME: "admin"
      LDAP_ADMIN_PASSWORD: "${LDAP_ADMIN_PASSWORD:?}"
      LDAP_CUSTOM_LDIF_DIR: "/ldifs/"
      LDAP_SKIP_DEFAULT_TREE: "yes"

  postgres:
    image: *postgres-image
    restart: "on-failure:3"
    container_name: "biserver-postgres"
    hostname: "postgres"
    networks:
      - "biserver"
    ports:
      - "${POSTGRES_HOST:-127.0.0.1}:${POSTGRES_PORT:-5432}:5432/tcp"
    volumes:
      - { type: "bind", source: "./config/postgres/initdb.d/", target: "/docker-entrypoint-initdb.d/", read_only: true }
      - { type: "volume", source: "postgres-data", target: "/var/lib/postgresql/data/" }
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "${DB_PASSWORD:?}"
      POSTGRES_JDBCSEC_USER: "${DB_JDBCSEC_USER:-jdbcsec}"
      POSTGRES_JDBCSEC_PASSWORD: "${DB_JDBCSEC_PASSWORD:?}"
      POSTGRES_JDBCSEC_DATABASE: "${DB_JDBCSEC_DATABASE:-jdbcsec}"
    healthcheck:
      test: ["CMD", "pg_isready", "-qU", "postgres"]
      start_period: "60s"
      interval: "30s"
      timeout: "10s"
      retries: 2

networks:

  biserver:
    name: "biserver"
    internal: false

volumes:

  caddy-data:
    name: "biserver-caddy-data"

  biserver-logs:
    name: "biserver-logs"

  openldap-data:
    name: "biserver-openldap-data"

  postgres-data:
    name: "biserver-postgres-data"
